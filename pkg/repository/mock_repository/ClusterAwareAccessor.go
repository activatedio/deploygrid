// Code generated by mockery v2.46.3. DO NOT EDIT.

package mock_repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ClusterAwareAccessor is an autogenerated mock type for the ClusterAwareAccessor type
type ClusterAwareAccessor[R any] struct {
	mock.Mock
}

type ClusterAwareAccessor_Expecter[R any] struct {
	mock *mock.Mock
}

func (_m *ClusterAwareAccessor[R]) EXPECT() *ClusterAwareAccessor_Expecter[R] {
	return &ClusterAwareAccessor_Expecter[R]{mock: &_m.Mock}
}

// ClusterNames provides a mock function with given fields: ctx
func (_m *ClusterAwareAccessor[R]) ClusterNames(ctx context.Context) []string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterNames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ClusterAwareAccessor_ClusterNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterNames'
type ClusterAwareAccessor_ClusterNames_Call[R any] struct {
	*mock.Call
}

// ClusterNames is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ClusterAwareAccessor_Expecter[R]) ClusterNames(ctx interface{}) *ClusterAwareAccessor_ClusterNames_Call[R] {
	return &ClusterAwareAccessor_ClusterNames_Call[R]{Call: _e.mock.On("ClusterNames", ctx)}
}

func (_c *ClusterAwareAccessor_ClusterNames_Call[R]) Run(run func(ctx context.Context)) *ClusterAwareAccessor_ClusterNames_Call[R] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClusterAwareAccessor_ClusterNames_Call[R]) Return(_a0 []string) *ClusterAwareAccessor_ClusterNames_Call[R] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClusterAwareAccessor_ClusterNames_Call[R]) RunAndReturn(run func(context.Context) []string) *ClusterAwareAccessor_ClusterNames_Call[R] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, clusterName
func (_m *ClusterAwareAccessor[R]) Get(ctx context.Context, clusterName string) (R, error) {
	ret := _m.Called(ctx, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 R
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (R, error)); ok {
		return rf(ctx, clusterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) R); ok {
		r0 = rf(ctx, clusterName)
	} else {
		r0 = ret.Get(0).(R)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterAwareAccessor_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ClusterAwareAccessor_Get_Call[R any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterName string
func (_e *ClusterAwareAccessor_Expecter[R]) Get(ctx interface{}, clusterName interface{}) *ClusterAwareAccessor_Get_Call[R] {
	return &ClusterAwareAccessor_Get_Call[R]{Call: _e.mock.On("Get", ctx, clusterName)}
}

func (_c *ClusterAwareAccessor_Get_Call[R]) Run(run func(ctx context.Context, clusterName string)) *ClusterAwareAccessor_Get_Call[R] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClusterAwareAccessor_Get_Call[R]) Return(_a0 R, _a1 error) *ClusterAwareAccessor_Get_Call[R] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClusterAwareAccessor_Get_Call[R]) RunAndReturn(run func(context.Context, string) (R, error)) *ClusterAwareAccessor_Get_Call[R] {
	_c.Call.Return(run)
	return _c
}

// NewClusterAwareAccessor creates a new instance of ClusterAwareAccessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClusterAwareAccessor[R any](t interface {
	mock.TestingT
	Cleanup(func())
}) *ClusterAwareAccessor[R] {
	mock := &ClusterAwareAccessor[R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
