// Code generated by mockery v2.46.3. DO NOT EDIT.

package mock_repository

import (
	context "context"

	repository "github.com/activatedio/deploygrid/pkg/repository"
	mock "github.com/stretchr/testify/mock"
)

// ComponentRepository is an autogenerated mock type for the ComponentRepository type
type ComponentRepository struct {
	mock.Mock
}

type ComponentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ComponentRepository) EXPECT() *ComponentRepository_Expecter {
	return &ComponentRepository_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: ctx, criteria
func (_m *ComponentRepository) List(ctx context.Context, criteria repository.ComponentCriteria) ([]repository.Component, error) {
	ret := _m.Called(ctx, criteria)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []repository.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ComponentCriteria) ([]repository.Component, error)); ok {
		return rf(ctx, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ComponentCriteria) []repository.Component); ok {
		r0 = rf(ctx, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Component)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ComponentCriteria) error); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComponentRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ComponentRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - criteria repository.ComponentCriteria
func (_e *ComponentRepository_Expecter) List(ctx interface{}, criteria interface{}) *ComponentRepository_List_Call {
	return &ComponentRepository_List_Call{Call: _e.mock.On("List", ctx, criteria)}
}

func (_c *ComponentRepository_List_Call) Run(run func(ctx context.Context, criteria repository.ComponentCriteria)) *ComponentRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ComponentCriteria))
	})
	return _c
}

func (_c *ComponentRepository_List_Call) Return(_a0 []repository.Component, _a1 error) *ComponentRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ComponentRepository_List_Call) RunAndReturn(run func(context.Context, repository.ComponentCriteria) ([]repository.Component, error)) *ComponentRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewComponentRepository creates a new instance of ComponentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComponentRepository {
	mock := &ComponentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
